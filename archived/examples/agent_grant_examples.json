{
  "examples": {
    "qwen_agent_grant": {
      "description": "Grant file for Qwen Code agent to perform code analysis",
      "grant_file": {
        "grantee": "0x742d35Cc6634C0532925a3b8D4C9db96C4b4d8b6",
        "operation": "prompt_qwen_agent",
        "parameters": {
          "goal": "Analyze this codebase to identify technical debt, suggest refactoring opportunities, and create comprehensive documentation including architectural diagrams and API documentation"
        },
        "expires": 1736467579
      },
      "api_request": {
        "app_signature": "0x3cffa64411a02d4a257663848df70fd445f513edcbb78a2e94495af45987e2de6144efdafd37a3d2b95e4e535c4a84fbcfb088d8052d435c382e7ca9a5ac57801c",
        "operation_request_json": "{\"permission_id\": 3072}"
      },
      "expected_result": {
        "status": "ok",
        "summary": "Analyzed codebase and created comprehensive documentation",
        "artifacts": [
          "./out/architecture.md",
          "./out/api_documentation.md",
          "./out/refactoring_suggestions.md",
          "./out/technical_debt_report.md"
        ]
      }
    },
    "gemini_agent_grant": {
      "description": "Grant file for Gemini AI agent to perform security review",
      "grant_file": {
        "grantee": "0x742d35Cc6634C0532925a3b8D4C9db96C4b4d8b6",
        "operation": "prompt_gemini_agent",
        "parameters": {
          "goal": "Perform a comprehensive security audit of this codebase, identify vulnerabilities (SQL injection, XSS, CSRF, etc.), suggest security improvements, and generate a detailed security report with OWASP Top 10 compliance check"
        },
        "expires": 1736467579
      },
      "api_request": {
        "app_signature": "0x3cffa64411a02d4a257663848df70fd445f513edcbb78a2e94495af45987e2de6144efdafd37a3d2b95e4e535c4a84fbcfb088d8052d435c382e7ca9a5ac57801c",
        "operation_request_json": "{\"permission_id\": 4096}"
      },
      "expected_result": {
        "status": "ok",
        "summary": "Completed security audit and generated vulnerability report",
        "artifacts": [
          "./out/security_report.md",
          "./out/vulnerability_list.json",
          "./out/owasp_compliance.md",
          "./out/security_recommendations.md"
        ]
      }
    },
    "comparative_analysis": {
      "description": "Example showing both agents working on the same codebase",
      "qwen_grant": {
        "grantee": "0x742d35Cc6634C0532925a3b8D4C9db96C4b4d8b6",
        "operation": "prompt_qwen_agent",
        "parameters": {
          "goal": "Generate comprehensive unit tests with high code coverage for all modules"
        }
      },
      "gemini_grant": {
        "grantee": "0x742d35Cc6634C0532925a3b8D4C9db96C4b4d8b6",
        "operation": "prompt_gemini_agent",
        "parameters": {
          "goal": "Create end-to-end integration tests and performance benchmarks"
        }
      },
      "use_case": "Both agents can work on complementary tasks - Qwen focuses on unit testing while Gemini handles integration testing"
    }
  },
  "workflow": {
    "steps": [
      {
        "step": 1,
        "description": "Create and sign grant file",
        "details": "Application creates a grant file with the desired operation and parameters, then signs it"
      },
      {
        "step": 2,
        "description": "Store grant file",
        "details": "Upload the signed grant file to IPFS or other storage"
      },
      {
        "step": 3,
        "description": "Create blockchain permission",
        "details": "Create a permission on-chain that references the grant file URL and the file IDs to process"
      },
      {
        "step": 4,
        "description": "Submit operation request",
        "details": "POST to /operations with the permission_id and signature"
      },
      {
        "step": 5,
        "description": "Agent execution",
        "details": "Server validates permission, fetches files, routes to appropriate agent (Qwen or Gemini), executes task in isolated environment"
      },
      {
        "step": 6,
        "description": "Retrieve results",
        "details": "GET /operations/{id} to poll for completion and retrieve artifacts"
      }
    ]
  },
  "capabilities": {
    "qwen_agent": [
      "Code analysis and understanding",
      "Documentation generation",
      "Refactoring suggestions",
      "Test generation",
      "Code review",
      "API documentation",
      "Architecture analysis",
      "Dependency analysis",
      "Code quality assessment"
    ],
    "gemini_agent": [
      "Security auditing",
      "Performance analysis",
      "Best practices review",
      "Integration testing",
      "Compliance checking",
      "Code optimization",
      "Workflow automation",
      "CI/CD pipeline generation",
      "DevOps recommendations"
    ]
  }
}