openapi: 3.0.3
info:
  title: Vana Personal-Server API
  version: "0.1.0"
  description: |
    A user-scoped compute service that executes permissioned operations
    (LLM inference, vector search, decryption, …) on private data.
    The contract is provider-agnostic, uses a clear /operations resource
    model, and defines a single streaming media-type (Server-Sent Events).

servers:
  - url: https://server.vana.com/api/v1

# ───────────────────────────────────────────────────────────────────────────
components:
  schemas:
    EthereumAddress:
      type: string
      description: EIP-55 checksum address, 20 bytes, 0x-prefixed.
      pattern: '^0x[a-fA-F0-9]{40}$'
      example: '0xf0ebD65BEaDacD191dc96D8EC69bbA4ABCf621D4'

    PublicKey:
      type: string
      description: Uncompressed secp256k1 public key, 128 hex characters.
      pattern: '^0x[a-fA-F0-9]{128}$'
      example: '0x04bcdf3e…'

    CreateOperationRequest:
      type: object
      required: [app_signature, operation_request_json]
      properties:
        app_signature:
          type: string
          description: The signature over the operation_request_json
          example: "0x3cffa64411a02d4a257663848df70fd445f513edcbb78a2e94495af45987e2de6144efdafd37a3d2b95e4e535c4a84fbcfb088d8052d435c382e7ca9a5ac57801c"
        operation_request_json:
          type: string
          description: |
            The request JSON which contains permission_id. 
            The operation type and parameters are defined in the grant file 
            referenced by the blockchain permission.
          example: "{\"permission_id\": 1024}"

    CreateOperationResponse:
      type: object
      required: [kind, id, created_at]
      properties:
        kind:
          type: string
          description: Resource type identifier
          example: "OperationCreated"
          default: "OperationCreated"
        id:
          type: string
          description: The operation ID for tracking the computation
          example: "test-prediction-id-123"
        created_at:
          type: string
          format: date-time
          description: The timestamp when the operation was created
          example: "2024-01-01T00:00:00Z"

    GetOperationResponse:
      type: object
      required: [kind, id, status]
      properties:
        kind:
          type: string
          description: Resource type identifier
          example: "OperationStatus"
          default: "OperationStatus"
        id:
          type: string
          description: The operation ID
          example: "test-prediction-id-123"
        status:
          type: string
          enum: [pending, running, succeeded, failed, cancelled]
          description: The status of the operation
        started_at:
          type: string
          format: date-time
          nullable: true
          description: Optional timestamp when the operation started
          example: "2024-01-01T00:00:00Z"
        finished_at:
          type: string
          format: date-time
          nullable: true
          description: Optional timestamp when the operation finished
          example: "2024-01-01T00:00:00Z"
        result:
          type: string
          nullable: true
          description: Optional result data if operation completed successfully

    PersonalServerModel:
      type: object
      required: [kind, address, public_key]
      properties:
        kind:
          type: string
          description: Resource type identifier
          example: "PersonalServer"
          default: "PersonalServer"
        address:
          $ref: '#/components/schemas/EthereumAddress'
        public_key:
          $ref: '#/components/schemas/PublicKey'

    IdentityResponseModel:
      type: object
      required: [kind, user_address, personal_server]
      properties:
        kind:
          type: string
          description: Resource type identifier
          example: "Identity"
          default: "Identity"
        user_address:
          $ref: '#/components/schemas/EthereumAddress'
        personal_server:
          $ref: '#/components/schemas/PersonalServerModel'

    ErrorResponse:
      type: object
      required: [kind, detail, error_code]
      properties:
        kind:
          type: string
          description: Resource type identifier
          example: "Error"
          default: "Error"
        detail:
          type: string
          description: Human-readable error message
          example: "Operation not found"
        error_code:
          type: string
          description: Machine-readable error code
          example: "NOT_FOUND_ERROR"
        field:
          type: string
          nullable: true
          description: Field name when error is related to a specific input field
          example: "permission_id"

    # Grant File Schemas - these represent the signed grant file structure
    ResponseFormat:
      type: object
      required: [type]
      properties:
        type:
          type: string
          enum: [text, json_object]
          description: The response format type
          example: "json_object"
      description: Response format specification for LLM operations

    BaseGrantFile:
      type: object
      required: [grantee, operation, parameters]
      properties:
        grantee:
          $ref: '#/components/schemas/EthereumAddress'
        operation:
          type: string
          description: The type of operation to perform
        parameters:
          type: object
          description: Operation-specific parameters
        expires:
          type: integer
          minimum: 0
          description: Optional Unix timestamp when grant expires
          example: 1736467579
      discriminator:
        propertyName: operation
        mapping:
          llm_inference: '#/components/schemas/LLMInferenceGrantFile'
          prompt_qwen_agent: '#/components/schemas/QwenAgentGrantFile'
          prompt_gemini_agent: '#/components/schemas/GeminiAgentGrantFile'

    LLMInferenceGrantFile:
      allOf:
        - $ref: '#/components/schemas/BaseGrantFile'
        - type: object
          properties:
            operation:
              type: string
              enum: [llm_inference]
              example: "llm_inference"
            parameters:
              type: object
              required: [prompt]
              properties:
                prompt:
                  type: string
                  description: The prompt template with {{data}} placeholder
                  example: "Analyze this data: {{data}}"
                response_format:
                  $ref: '#/components/schemas/ResponseFormat'
              additionalProperties: true
              description: LLM inference parameters

    QwenAgentGrantFile:
      allOf:
        - $ref: '#/components/schemas/BaseGrantFile'
        - type: object
          properties:
            operation:
              type: string
              enum: [prompt_qwen_agent]
              example: "prompt_qwen_agent"
            parameters:
              type: object
              required: [goal]
              properties:
                goal:
                  type: string
                  description: The analysis goal for processing personal data
                  example: "Analyze my conversation history and create a personalized learning summary"
              additionalProperties: true
              description: Qwen agent task parameters

    GeminiAgentGrantFile:
      allOf:
        - $ref: '#/components/schemas/BaseGrantFile'
        - type: object
          properties:
            operation:
              type: string
              enum: [prompt_gemini_agent]
              example: "prompt_gemini_agent"
            parameters:
              type: object
              required: [goal]
              properties:
                goal:
                  type: string
                  description: The analysis goal for processing personal data  
                  example: "Review my personal activity data for privacy insights and recommendations"
              additionalProperties: true
              description: Gemini agent task parameters

    GrantFile:
      oneOf:
        - $ref: '#/components/schemas/LLMInferenceGrantFile'
        - $ref: '#/components/schemas/QwenAgentGrantFile'
        - $ref: '#/components/schemas/GeminiAgentGrantFile'
      discriminator:
        propertyName: operation
      description: |
        Grant file structure that defines the operation and its parameters.
        The grant file is cryptographically signed and contains the user's intent.
        
        **Currently Supported Operations:**
        - `llm_inference`: Large Language Model inference with optional JSON mode
        - `prompt_qwen_agent`: Qwen AI agent for analyzing personal data
        - `prompt_gemini_agent`: Gemini AI agent for personal data insights
        
        **Agent Operations:**
        Agent operations (`prompt_qwen_agent` and `prompt_gemini_agent`) execute sophisticated
        AI agents that analyze and process the user's personal data. These agents can generate
        insights, reports, recommendations, and structured analysis of private data such as
        conversation histories, personal preferences, activity logs, and other user-specific content.
        The agents work in isolated environments and return structured results with artifacts.
        
        **JSON Mode (LLM only):**
        When `response_format.type` is `json_object`, the LLM will output valid JSON.

    ValidationErrorResponse:
      allOf:
        - $ref: '#/components/schemas/ErrorResponse'
        - type: object
          description: "Validation error with error_code values: VALIDATION_ERROR, VALIDATION_ERROR_PERMISSION_ID, VALIDATION_ERROR_USER_ADDRESS, VALIDATION_ERROR_OPERATION_REQUEST_JSON"

    AuthenticationErrorResponse:
      allOf:
        - $ref: '#/components/schemas/ErrorResponse'
        - type: object
          description: "Authentication error with error_code: AUTHENTICATION_ERROR"

    AuthorizationErrorResponse:
      allOf:
        - $ref: '#/components/schemas/ErrorResponse'
        - type: object
          description: "Authorization error with error_code: AUTHORIZATION_ERROR"

    NotFoundErrorResponse:
      allOf:
        - $ref: '#/components/schemas/ErrorResponse'
        - type: object
          description: "Not found error with error_code: NOT_FOUND_ERROR"

    BlockchainErrorResponse:
      allOf:
        - $ref: '#/components/schemas/ErrorResponse'
        - type: object
          description: "Blockchain error with error_code: BLOCKCHAIN_ERROR"

    FileAccessErrorResponse:
      allOf:
        - $ref: '#/components/schemas/ErrorResponse'
        - type: object
          description: "File access error with error_code: FILE_ACCESS_ERROR"

    ComputeErrorResponse:
      allOf:
        - $ref: '#/components/schemas/ErrorResponse'
        - type: object
          description: "Compute error with error_code: COMPUTE_ERROR"

    DecryptionErrorResponse:
      allOf:
        - $ref: '#/components/schemas/ErrorResponse'
        - type: object
          description: "Decryption error with error_code: DECRYPTION_ERROR"

    GrantValidationErrorResponse:
      allOf:
        - $ref: '#/components/schemas/ErrorResponse'
        - type: object
          description: "Grant validation error with error_code: GRANT_VALIDATION_ERROR"

    OperationErrorResponse:
      allOf:
        - $ref: '#/components/schemas/ErrorResponse'
        - type: object
          description: "Operation error with error_code: OPERATION_ERROR"

    InternalServerErrorResponse:
      allOf:
        - $ref: '#/components/schemas/ErrorResponse'
        - type: object
          description: "Internal server error with error_code: INTERNAL_SERVER_ERROR"

  parameters:
    OpId:
      name: operation_id
      in: path
      required: true
      schema:
        type: string
      description: The operation ID

# ───────────────────────────────────────────────────────────────────────────
paths:
  /operations:
    post:
      summary: Start an operation (asynchronous)
      description: |
        Creates a new operation with the provided request data and signature.
        
        **How it works:**
        1. The `permission_id` in the request references a blockchain permission
        2. The permission contains a link to a grant file (stored on IPFS)
        3. The grant file defines the operation type and parameters
        4. The grant file is cryptographically signed by the grantee
        
        **Grant File Examples:**
        
        *LLM Inference with JSON mode:*
        ```json
        {
          "grantee": "0x123...",
          "operation": "llm_inference",
          "parameters": {
            "prompt": "Analyze this data: {{data}}",
            "response_format": {"type": "json_object"}
          }
        }
        ```
        
        *LLM Inference with text mode (default):*
        ```json
        {
          "grantee": "0x123...", 
          "operation": "llm_inference",
          "parameters": {
            "prompt": "Summarize this content: {{data}}"
          }
        }
        ```
        
        *Qwen Agent for personal data analysis:*
        ```json
        {
          "grantee": "0x123...",
          "operation": "prompt_qwen_agent",
          "parameters": {
            "goal": "Analyze my conversation history and activity logs to identify patterns and create a personalized productivity report"
          }
        }
        ```
        
        *Gemini Agent for personal insights:*
        ```json
        {
          "grantee": "0x123...",
          "operation": "prompt_gemini_agent",
          "parameters": {
            "goal": "Review my personal data for privacy concerns and generate recommendations for improving my digital privacy"
          }
        }
        ```
        
        **Possible Errors:**
        - `400 VALIDATION_ERROR`: Invalid request format or missing required fields
        - `400 VALIDATION_ERROR_PERMISSION_ID`: Invalid or missing permission ID
        - `400 VALIDATION_ERROR_OPERATION_REQUEST_JSON`: Invalid JSON format in operation request
        - `400 GRANT_VALIDATION_ERROR`: Grant validation failed
        - `401 AUTHENTICATION_ERROR`: Invalid signature or unable to recover app address
        - `404 NOT_FOUND_ERROR`: Permission, file, or grant not found
        - `500 BLOCKCHAIN_ERROR`: Blockchain communication failed
        - `500 FILE_ACCESS_ERROR`: Failed to access or download files
        - `500 DECRYPTION_ERROR`: Failed to decrypt file content
        - `500 COMPUTE_ERROR`: Compute operation failed
        - `500 OPERATION_ERROR`: General operation processing error
        - `500 INTERNAL_SERVER_ERROR`: Unexpected server error
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/CreateOperationRequest' }
            examples:
              llm_json_mode:
                summary: LLM Inference with JSON Mode
                description: Request for LLM inference with JSON mode (defined in grant file)
                value:
                  app_signature: "0x3cffa64411a02d4a257663848df70fd445f513edcbb78a2e94495af45987e2de6144efdafd37a3d2b95e4e535c4a84fbcfb088d8052d435c382e7ca9a5ac57801c"
                  operation_request_json: "{\"permission_id\": 1024}"
              llm_text_mode:
                summary: LLM Inference with Text Mode  
                description: Request for LLM inference with default text output (defined in grant file)
                value:
                  app_signature: "0x3cffa64411a02d4a257663848df70fd445f513edcbb78a2e94495af45987e2de6144efdafd37a3d2b95e4e535c4a84fbcfb088d8052d435c382e7ca9a5ac57801c"
                  operation_request_json: "{\"permission_id\": 2048}"
              qwen_agent:
                summary: Qwen Agent Task
                description: Request for Qwen Code agent to perform a complex coding task (defined in grant file)
                value:
                  app_signature: "0x3cffa64411a02d4a257663848df70fd445f513edcbb78a2e94495af45987e2de6144efdafd37a3d2b95e4e535c4a84fbcfb088d8052d435c382e7ca9a5ac57801c"
                  operation_request_json: "{\"permission_id\": 3072}"
              gemini_agent:
                summary: Gemini Agent Task
                description: Request for Gemini AI agent to perform development workflow (defined in grant file)
                value:
                  app_signature: "0x3cffa64411a02d4a257663848df70fd445f513edcbb78a2e94495af45987e2de6144efdafd37a3d2b95e4e535c4a84fbcfb088d8052d435c382e7ca9a5ac57801c"
                  operation_request_json: "{\"permission_id\": 4096}"
      responses:
        "202":
          description: Accepted — operation handle returned.
          content:
            application/json:
              schema: { $ref: '#/components/schemas/CreateOperationResponse' }
        "400":
          description: Validation or grant validation error
          content:
            application/json:
              schema: 
                oneOf:
                  - $ref: '#/components/schemas/ValidationErrorResponse'
                  - $ref: '#/components/schemas/GrantValidationErrorResponse'
        "401":
          description: Authentication error (invalid signature)
          content:
            application/json:
              schema: { $ref: '#/components/schemas/AuthenticationErrorResponse' }
        "404":
          description: Resource not found (permission, file, or grant)
          content:
            application/json:
              schema: { $ref: '#/components/schemas/NotFoundErrorResponse' }
        "500":
          description: Server error during operation processing
          content:
            application/json:
              schema: 
                oneOf:
                  - $ref: '#/components/schemas/BlockchainErrorResponse'
                  - $ref: '#/components/schemas/FileAccessErrorResponse'
                  - $ref: '#/components/schemas/DecryptionErrorResponse'
                  - $ref: '#/components/schemas/ComputeErrorResponse'
                  - $ref: '#/components/schemas/OperationErrorResponse'
                  - $ref: '#/components/schemas/InternalServerErrorResponse'

  /operations/{operation_id}:
    parameters: [ { $ref: '#/components/parameters/OpId' } ]

    get:
      summary: Poll operation status / result
      description: |
        Retrieves the current status and result of an operation.
        
        **Possible Errors:**
        - `404 NOT_FOUND_ERROR`: Operation not found
        - `500 COMPUTE_ERROR`: Failed to get prediction status
        - `500 INTERNAL_SERVER_ERROR`: Unexpected server error
      responses:
        "200":
          description: Operation status retrieved successfully
          content:
            application/json:
              schema: { $ref: '#/components/schemas/GetOperationResponse' }
        "404":
          description: Operation not found
          content:
            application/json:
              schema: { $ref: '#/components/schemas/NotFoundErrorResponse' }
        "500":
          description: Server error during status retrieval
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ComputeErrorResponse'
                  - $ref: '#/components/schemas/InternalServerErrorResponse'

  /operations/{operation_id}/cancel:
    parameters: [ { $ref: '#/components/parameters/OpId' } ]
    
    post:
      summary: Cancel a running operation
      description: |
        Cancels a running operation.
        
        **Possible Errors:**
        - `404 NOT_FOUND_ERROR`: Operation not found
        - `500 COMPUTE_ERROR`: Failed to cancel prediction
        - `500 INTERNAL_SERVER_ERROR`: Unexpected server error
      responses:
        "204":
          description: Operation cancelled or already finished
        "404":
          description: Operation not found
          content:
            application/json:
              schema: { $ref: '#/components/schemas/NotFoundErrorResponse' }
        "500":
          description: Server error during cancellation
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ComputeErrorResponse'
                  - $ref: '#/components/schemas/InternalServerErrorResponse'

  /identity:
    get:
      summary: Derive deterministic server identity for a user
      description: |
        Derives a deterministic server identity (address and public key) for a user based on their Ethereum address.
        
        **Possible Errors:**
        - `400 VALIDATION_ERROR_USER_ADDRESS`: Invalid user address format
        - `500 OPERATION_ERROR`: Address derivation failed
        - `500 INTERNAL_SERVER_ERROR`: Unexpected server error
      parameters:
        - name: address
          in: query
          required: true
          schema: { $ref: '#/components/schemas/EthereumAddress' }
          description: Caller's wallet address (EIP-55).
      responses:
        "200":
          description: Server identity retrieved successfully
          content:
            application/json:
              schema: { $ref: '#/components/schemas/IdentityResponseModel' }
        "400":
          description: Invalid address format
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ValidationErrorResponse' }
        "500":
          description: Server error during identity derivation
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/OperationErrorResponse'
                  - $ref: '#/components/schemas/InternalServerErrorResponse'

  /artifacts/download:
    post:
      summary: Download operation artifact with authentication
      description: |
        Downloads an artifact generated by a completed agent operation.
        
        Requires signature-based authentication using the same pattern as operations API.
        The requesting address must match the original operation's grantee.
        
        **Authentication:**
        - Sign the JSON request data: `{"operation_id":"...","artifact_path":"..."}`  
        - Include the signature in the request body
        - Must be the same address that created the operation
        
        **Artifact Path:**
        Use the `artifact_path` from the operation result's artifact metadata.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [operation_id, artifact_path, signature]
              properties:
                operation_id:
                  type: string
                  description: The operation ID that generated the artifact
                  example: "gemini_1755995331783"
                artifact_path:
                  type: string  
                  description: Path to the artifact file (from operation result)
                  example: "out/analysis_report.md"
                signature:
                  type: string
                  description: Ethereum signature over the JSON request data
                  example: "0x3cffa64411a02d4a257663848df70fd445f513edcbb78a2e94495af45987e2de..."
            example:
              operation_id: "gemini_1755995331783"
              artifact_path: "out/analysis_report.md"
              signature: "0x3cffa64411a02d4a257663848df70fd445f513edcbb78a2e94495af45987e2de6144efdafd37a3d2b95e4e535c4a84fbcfb088d8052d435c382e7ca9a5ac57801c"
      responses:
        "200":
          description: Artifact content returned successfully
          content:
            text/plain:
              schema:
                type: string
                format: binary
              example: "# Analysis Report\n\nThis report analyzes..."
            text/markdown:
              schema:
                type: string
                format: binary
            application/json:
              schema:
                type: object
            text/csv:
              schema:
                type: string
                format: binary
        "400":
          description: Invalid request or authentication failed
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ValidationErrorResponse' }
        "401":
          description: Authentication failed
          content:
            application/json:
              schema: { $ref: '#/components/schemas/AuthenticationErrorResponse' }
        "403":
          description: Access denied - not the authorized grantee
          content:
            application/json:
              schema: { $ref: '#/components/schemas/AuthorizationErrorResponse' }
        "404":
          description: Operation or artifact not found
          content:
            application/json:
              schema: { $ref: '#/components/schemas/NotFoundErrorResponse' }
        "500":
          description: Server error during download
          content:
            application/json:
              schema: { $ref: '#/components/schemas/InternalServerErrorResponse' }
